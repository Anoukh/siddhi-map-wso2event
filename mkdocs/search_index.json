{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-map-wso2event\n\n\nThis repository contains source code for siddhi WSO2 event mapper extensions. WSO2 mapper is used to convert WSO2\nevents to/from Siddhi events. This repository can be independently released from Siddhi.\n\n\nHow to Contribute\n\n\n\n\nPlease report issues at \nSiddhi Github Issue Tacker\n\n\nCarbon Developers List : dev@wso2.org\n\n\nCarbon Architecture List : architecture@wso2.org\n\n\n\n\nWe welcome your feedback and contribution.\n\n\nSiddhi SP Team\n\n\nAPI Docs:\n\n\n\n\n4.0.1-SNAPSHOT", 
            "title": "Welcome to WSO2 Siddhi Map WSO2Event"
        }, 
        {
            "location": "/#siddhi-map-wso2event", 
            "text": "This repository contains source code for siddhi WSO2 event mapper extensions. WSO2 mapper is used to convert WSO2\nevents to/from Siddhi events. This repository can be independently released from Siddhi.", 
            "title": "siddhi-map-wso2event"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  Siddhi Github Issue Tacker  Carbon Developers List : dev@wso2.org  Carbon Architecture List : architecture@wso2.org   We welcome your feedback and contribution.  Siddhi SP Team", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#api-docs", 
            "text": "4.0.1-SNAPSHOT", 
            "title": "API Docs:"
        }, 
        {
            "location": "/about/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/", 
            "text": "Sinkmapper\n\n\nwso2event \n(Sink Mapper)\n\n\nEvent to WSO2 output mapper. Transports which publish WSO2 messages, can utilize this extension to convert the Siddhi event to WSO2 event objects. Users can send pre-defined WSO2 event format which adheres from the defined stream.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\nwso2event\n, arbitrary.map=\nSTRING\n)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narbitrary.map\n\n        \nUsed to provide the attribute name of the stream which the arbitrary object to be mapped fromeg: arbitrary.map='foo' foo is a attribute name in the stream definition with the attribute type object\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\n@sink(type='wso2event', @map(type='wso2event')); define stream FooStream (symbol string, price float, volume long);\n\n\n\n\nAbove configuration will do a WSO2 input mapping which will generate below output.\nWso2event = {\nstreamId: barStream:1.0.0,\ntimestamp: FooStream_siddhi_event_timestamp,\nmetaData: [],\ncorrelationData: [],\npayloadData: [symbol, price, volume]\n}\n\n\n\nExample 2\n\n\n@sink(type='wso2event', @map(type='wso2event', arbitrary.map='arbitrary_object')) define stream FooStream (meta_timestamp long, symbol string, price float, volume long, arbitrary_object object);\n\n\n\n\nAbove configuration will perform a WSO2 mapping with the arbitrary object which will produce below output WSO2 event message.\nWso2event = {\nstreamId: barStream:1.0.0,\ntimeStamp: FooStream_siddhi_event_timestamp,\nmetaData: [meta_timestamp],\ncorrelationData: [],\npayloadData: [symbol, price, volume],\narbitraryDataMap: arbitrary\n}\n\n\n\nSourcemapper\n\n\nwso2event \n(Source Mapper)\n\n\nWSO2 event to Siddhi Event input mapper. Transports which accepts WSO2 messages can utilize this extension to convert the incoming WSO2 message to Siddhi event. Users can send a WSO2 messagewhich should contain the mapping stream attributes in the same order as the defined stream. This conversion will happen without any configs.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\nwso2event\n, arbitrary.map=\nSTRING\n)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narbitrary.map\n\n        \nUsed to provide the attribute name of the stream which the arbitrary object to be mappedeg: arbitrary.map='foo' foo is a attribute name in the stream definition with the attribute type object\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\n@source(type=\u2019wso2event\u2019, @map(type=\u2019wso2event\u2019) define stream FooStream (meta_timestamp long, symbol string, price float, volume long);\n\n\n\n\nAbove configuration will do a WSO2 mapping. Expected input will look like below.\nWso2event = {\nstreamId: org.wso2event.fooStream:1.0.0,\ntimestamp: 431434134134,\nmetaData: [timestamp, meta_object2],\ncorrelationData: [correlation_object1],\npayloadData: [symbol, price, volume]\n}\nThere can be at least the number of attributes of each type (meta, correlation, payload) or more than defined in the stream definition eg: metaData array has more than meta attributes defined and payloadData has the exact amount of attributes as defined in the stream\n\n\n\nExample 2\n\n\n@source(type=\u2019wso2event\u2019, @map(type=\u2019wso2event\u2019, arbitrary.map='arbitrary_object'))define stream FooStream (meta_timestamp long, symbol string, price float, volume long, arbitrary_object object)); \n\n\n\n\nAbove configuration will do a WSO2 mapping which also expects an arbitrary map. Expected input will look like below.\nWso2event = {\nstreamId: org.wso2event.fooStream:1.0.0,\ntimeStamp: 431434134134,\nmetaData: [timestamp, meta_object2],\ncorrelationData: [correlation_object1],\npayloadData: [symbol, price, volume],\narbitraryDataMap: objectMap,\n}\nThe WSO2 mapper will get the arbitrary map in the WSO2 event. And assign its value. If the map is not defined, the Siddhi events arbitrary object value would be assigned as null", 
            "title": "4.0.1-SNAPSHOT"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#wso2event-sink-mapper", 
            "text": "Event to WSO2 output mapper. Transports which publish WSO2 messages, can utilize this extension to convert the Siddhi event to WSO2 event objects. Users can send pre-defined WSO2 event format which adheres from the defined stream.", 
            "title": "wso2event (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax", 
            "text": "@sink(..., @map(type= wso2event , arbitrary.map= STRING )", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         arbitrary.map \n         Used to provide the attribute name of the stream which the arbitrary object to be mapped fromeg: arbitrary.map='foo' foo is a attribute name in the stream definition with the attribute type object \n         null \n         STRING \n         Yes \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1", 
            "text": "@sink(type='wso2event', @map(type='wso2event')); define stream FooStream (symbol string, price float, volume long);  Above configuration will do a WSO2 input mapping which will generate below output. Wso2event = { streamId: barStream:1.0.0, timestamp: FooStream_siddhi_event_timestamp, metaData: [], correlationData: [], payloadData: [symbol, price, volume] }", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-2", 
            "text": "@sink(type='wso2event', @map(type='wso2event', arbitrary.map='arbitrary_object')) define stream FooStream (meta_timestamp long, symbol string, price float, volume long, arbitrary_object object);  Above configuration will perform a WSO2 mapping with the arbitrary object which will produce below output WSO2 event message. Wso2event = { streamId: barStream:1.0.0, timeStamp: FooStream_siddhi_event_timestamp, metaData: [meta_timestamp], correlationData: [], payloadData: [symbol, price, volume], arbitraryDataMap: arbitrary }", 
            "title": "Example 2"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#wso2event-source-mapper", 
            "text": "WSO2 event to Siddhi Event input mapper. Transports which accepts WSO2 messages can utilize this extension to convert the incoming WSO2 message to Siddhi event. Users can send a WSO2 messagewhich should contain the mapping stream attributes in the same order as the defined stream. This conversion will happen without any configs.", 
            "title": "wso2event (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_1", 
            "text": "@source(..., @map(type= wso2event , arbitrary.map= STRING )", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_1", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         arbitrary.map \n         Used to provide the attribute name of the stream which the arbitrary object to be mappedeg: arbitrary.map='foo' foo is a attribute name in the stream definition with the attribute type object \n         null \n         STRING \n         Yes \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_1", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_1", 
            "text": "@source(type=\u2019wso2event\u2019, @map(type=\u2019wso2event\u2019) define stream FooStream (meta_timestamp long, symbol string, price float, volume long);  Above configuration will do a WSO2 mapping. Expected input will look like below. Wso2event = { streamId: org.wso2event.fooStream:1.0.0, timestamp: 431434134134, metaData: [timestamp, meta_object2], correlationData: [correlation_object1], payloadData: [symbol, price, volume] } There can be at least the number of attributes of each type (meta, correlation, payload) or more than defined in the stream definition eg: metaData array has more than meta attributes defined and payloadData has the exact amount of attributes as defined in the stream", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-2_1", 
            "text": "@source(type=\u2019wso2event\u2019, @map(type=\u2019wso2event\u2019, arbitrary.map='arbitrary_object'))define stream FooStream (meta_timestamp long, symbol string, price float, volume long, arbitrary_object object));   Above configuration will do a WSO2 mapping which also expects an arbitrary map. Expected input will look like below. Wso2event = { streamId: org.wso2event.fooStream:1.0.0, timeStamp: 431434134134, metaData: [timestamp, meta_object2], correlationData: [correlation_object1], payloadData: [symbol, price, volume], arbitraryDataMap: objectMap, } The WSO2 mapper will get the arbitrary map in the WSO2 event. And assign its value. If the map is not defined, the Siddhi events arbitrary object value would be assigned as null", 
            "title": "Example 2"
        }
    ]
}